
  #- platform: command_line
  #  name: Twinkly sensor
  #  command: >
  #    /config/scripts/twinkly.py 192.168.0.41 get_color get_brightness get_mode
  #  scan_interval: 10
  #  value_template: "{{ value_json.get_mode }}"
  #  json_attributes:
  #    - get_color
  #    - get_brightness
  #    - get_mode


- platform: nordpool

  # Should the prices include vat? Default True
  VAT: True

  # What currency the api fetches the prices in
  # this is only need if you want a sensor in a non local currency
  currency: "SEK"
  
  # Option to show prices in cents (or the equivalent in local currency)
  price_in_cents: True

  # Helper so you can set your "low" price
  # low_price = hour_price < average * low_price_cutoff
  low_price_cutoff: 0.70

  # What power regions your are interested in.
  # Possible values: "DK1", "DK2", "FI", "LT", "LV", "Oslo", "Kr.sand", "Bergen", "Molde", "Tr.heim", "Tromsø", "SE1", "SE2", "SE3","SE4", "SYS", "EE"
  region: "SE3"

  # How many decimals to use in the display of the price
  precision: 0

  # What the price should be displayed in default
  # Possible values: MWh, kWh and Wh
  # default: kWh
  price_type: kWh

  # This option allows the usage of a template to add a tariff.
  # now() always refers start of the hour of that price.
  # this way we can calculate the correct costs add that to graphs etc.
  # The price result of the additional_costs template expects this additional cost to be in kWh and not cents as a float
  # default {{0.0|float}}
  additional_costs: "{{0.0|float}}"


- platform: history_stats
  name: Receiver on today
  entity_id: media_player.denon_3300
  state:
    - "on"
    - "playing"
  type: time
  start: "{{ now().replace(hour=0, minute=0, second=0) }}"
  end: "{{ now() }}"
