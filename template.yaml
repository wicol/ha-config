- trigger:
    - platform: state
      entity_id: sensor.hp_outdoor
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
  sensor:
    - name: "Calibrated outdoor temp"
      unique_id: calibrated_outdoor_temp
      device_class: temperature
      unit_of_measurement: "°C"
      state: >
        {%- set hp_outdoor = states('sensor.hp_outdoor') | float -%}
        {%- set offset = states('input_number.outdoor_temp_offset') | int -%}
        {{ (hp_outdoor - offset) | round(1, default=0) }}

#- trigger:
#    - platform: homeassistant
#      event: start
#    - platform: event
#      event_type: event_template_reloaded
#    - platform: time_pattern
#      hours: "*"
#  sensor:
#    - name: "Heating energy price influence"
#      unique_id: heating_energy_price_influence
#      device_class: temperature
#      unit_of_measurement: "°C"
#      state: >
#        {%- set cheap_hours = states('input_text.heating_cheap_hours') -%}
#        {%- set expensive_hours = states('input_text.heating_expensive_hours') -%}
#        {%- set now_time = now().strftime('%H:%M') -%}
#        {%- if now_time in cheap_hours -%}
#          -2
#        {%- elif now_time in expensive_hours -%}
#          2
#        {%- else -%}
#          0
#        {%- endif -%}


- trigger:
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
    - platform: time_pattern
      hours: "*"
  sensor:
    - name: "Heating blocker compensator"
      unique_id: heating_blocker_compensator
      device_class: temperature
      unit_of_measurement: "°C"
      # if heating will be blocked in 4 hours or less - compensate by pre-heating to 21C
      state: >
        {%- set cheap_hours = states('input_text.heating_cheap_hours') -%}
        {%- set expensive_hours = states('input_text.heating_expensive_hours') -%}
        {%- set now_time = now().strftime('%H:%M') -%}
        {%- set now_time_1 = (now() + timedelta(hours=1)).strftime('%H:%M') -%}
        {%- set now_time_2 = (now() + timedelta(hours=2)).strftime('%H:%M') -%}
        {%- set now_time_3 = (now() + timedelta(hours=3)).strftime('%H:%M') -%}
        {%- set avg_temp = (
              states('sensor.temperature_1')|float
              + states('sensor.temperature_3')|float
              + states('sensor.temperature_4')|float
              + states('sensor.temperature_6')|float
            ) / 4
        -%}
        {# dont activate during the last hours since future times will be tomorrow and wrap to earlier today #}
        {# dont need it then anyways since first few hours are never considered expensive #}
        {%- if now() < today_at("21:00")
            and now_time in cheap_hours
            and (now_time_1 in expensive_hours or now_time_2 in expensive_hours or now_time_3 in expensive_hours) 
            and avg_temp < 21 -%}
          -2
        {%- else -%}
          0
        {%- endif -%}


- trigger:
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
    - platform: numeric_state
      entity_id: sensor.motion_1_light
      above: 3200
      for:
        minutes: 10
    - platform: numeric_state
      entity_id: sensor.motion_1_light
      below: 3200
      for:
        minutes: 10
  sensor:
    - name: "Heating sun influence"
      unique_id: heating_sun_influence
      device_class: temperature
      unit_of_measurement: "°C"
      state: >
        {%- if states('sensor.motion_1_light')|int > 3200 -%}
          2
        {%- else -%}
          0
        {%- endif -%}

- trigger:
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded
  sensor:
    - name: "Heating wind influence"
      unique_id: heating_wind_influence
      device_class: temperature
      unit_of_measurement: "°C"
      state: 0

- trigger:
    - platform: state
      entity_id: sensor.power_usage
    - platform: state
      entity_id: sensor.nordpool_kwh_se3_sek_0_07_025
  sensor:
    - name: "Current energy cost"
      unique_id: current_energy_cost
      device_class: monetary
      unit_of_measurement: "Kr/h"
      state: >
        {%- set power = states('sensor.power_usage') | int -%}
        {%- set price = states('sensor.nordpool_kwh_se3_sek_0_07_025') | int -%}
        {{ (power/1000 * price/100) | round(1, default=0) }}

